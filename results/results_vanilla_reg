import sys
sys.path.append(r"C:\Users\Ernesto\OneDrive - ETH Zurich\Desktop\MT\COMET\synthetic_data_generation")
sys.path.append(r"C:\Users\Ernesto\OneDrive - ETH Zurich\Desktop\MT\COMET")
sys.path.append(r"C:/Users/Ernesto/OneDrive - ETH Zurich/Desktop/MT/COMET/regressor")
from synthetic_data import SyntheticDataGenerator
from regressor import reg_sklearn
import numpy as np
import matplotlib.pyplot as plt
import os
from pathlib import Path

my_path = Path(__file__).resolve().parent



"""
First we generate data for 100 patients and 100 organs and different noise levels for the outcomes.
We compare the accuracy of the three regression methods for different noise levels. 
"""
noise_levels = [0, 0.5, 1, 3, 5, 10, 20, 50]
n = 10
m = 10
results = []

for _ in range(10):
    simulation_results = {}
    for i in range(len(noise_levels)):
        generator = SyntheticDataGenerator(n, m, noise_levels[i])
        df_patients, df_organs, df_outcomes, df_outcomes_noiseless = generator.generate_datasets()
        simulation_results[i] = reg_sklearn.RegressionModel(df_patients, df_organs, df_outcomes, df_outcomes_noiseless, remote=False).run_regression()
        print(f"Done with noise level {noise_levels[i]}")
    results.append(simulation_results)

# Calculate the mean MSE values for each model and noise level
    

linear_mse = [np.mean([results[j][i]['MSE'][0] for j in range(10) ]) for i in range(len(noise_levels))]
ridge_mse = [np.mean([results[j][i]['MSE'][1] for j in range(10) ]) for i in range(len(noise_levels))]
random_forests_mse = [np.mean([results[j][i]['MSE'][2] for j in range(10) ]) for i in range(len(noise_levels))]

linear_noiseless_mse = [np.mean([results[j][i]['MSE Noiseless'][0] for j in range(10)]) for i in range(len(noise_levels))]
ridge_noiseless_mse = [np.mean([results[j][i]['MSE Noiseless'][1] for j in range(10)]) for i in range(len(noise_levels))]
random_forests_noiseless_mse = [np.mean([results[j][i]['MSE Noiseless'][2] for j in range(10)]) for i in range(len(noise_levels))]



# Plot the mean MSE values
plt.plot(noise_levels, linear_mse, label='Mean Linear Regression')
plt.plot(noise_levels, ridge_mse, label='Mean Ridge Regression')
plt.plot(noise_levels, random_forests_mse, label='Mean Random Forests')
plt.xlabel('Noise Level')
plt.ylabel('Mean MSE')
plt.title('Mean MSE for Different Noise Levels and Models, n={}, m={}'.format(n, m))
plt.legend()
plt.savefig(os.path.join(my_path , '{}.png'.format(plt.gca().get_title())))
plt.show()



# Plot the mean noiseless MSE values
plt.plot(noise_levels, linear_noiseless_mse, label='Mean Linear Regression Noiseless')
plt.plot(noise_levels, ridge_noiseless_mse, label='Mean Ridge Regression Noiseless')
plt.plot(noise_levels, random_forests_noiseless_mse, label='Mean Random Forests Noiseless')
plt.xlabel('Noise Level')
plt.ylabel('Mean Noiseless MSE')
plt.title('Mean Noiseless MSE for Different Noise Levels, n={}, m={}'.format(n, m))
plt.legend()
plt.savefig(os.path.join(my_path , '{}.png'.format(plt.gca().get_title())))
plt.show()


# Combine the two plots into one
plt.figure(figsize=(10, 5))

# Plot the mean MSE values
plt.subplot(1, 2, 1)
plt.plot(noise_levels, linear_mse, label='Mean Linear Regression')
plt.plot(noise_levels, ridge_mse, label='Mean Ridge Regression')
plt.plot(noise_levels, random_forests_mse, label='Mean Random Forests')
plt.xlabel('Noise Level')
plt.ylabel('Mean MSE')
plt.title('Mean MSE for Different Noise Levels and Models, n={}, m={}'.format(n, m))
plt.legend()

# Plot the mean noiseless MSE values
plt.subplot(1, 2, 2)
plt.plot(noise_levels, linear_noiseless_mse, label='Mean Linear Regression Noiseless')
plt.plot(noise_levels, ridge_noiseless_mse, label='Mean Ridge Regression Noiseless')
plt.plot(noise_levels, random_forests_noiseless_mse, label='Mean Random Forests Noiseless')
plt.xlabel('Noise Level')
plt.ylabel('Mean Noiseless MSE')
plt.title('Mean Noiseless MSE for Different Noise Levels, n={}, m={}'.format(n, m))
plt.legend()

plt.tight_layout()
plt.savefig(os.path.join(my_path , 'combined_plots.png'))
plt.show()